name: Deploy Slash Command
on:
  repository_dispatch:
    types: [deploy-command]
jobs:
  example:
    runs-on: ubuntu-latest
    steps:
      - name: Get branch and cluster
        id: vars
        run: |
          branch=${{ github.event.client_payload.slash_command.args.named.branch }}
          if [[ -z "$branch" ]]; then branch="develop"; fi
          echo ::set-output name=branch::$branch
          cluster=${{ github.event.client_payload.slash_command.args.named.cluster }}
          if [[ -z "$cluster" ]]; then exit 1; fi
          echo ::set-output name=cluster::$cluster
      - name: Print vars
        run: |
          echo "${{ steps.vars.outputs.branch }}"
          echo "${{ steps.vars.outputs.cluster }}"
          echo ${{ steps.vars.outputs.branch }}
          echo ${{ steps.vars.outputs.cluster }}
      - uses: actions/checkout@v2
        with:
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.ref }}
      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: hooray
      - name: Dump the client payload context
        env:
          PAYLOAD_CONTEXT: ${{ toJson(github.event.client_payload) }}
        run: echo "$PAYLOAD_CONTEXT"
  build:
    runs-on: ubuntu-latest
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: get short sha and docker path
        id: vars
        run: |
          echo ::set-output name=short_sha::$(git rev-parse --short HEAD)
          if [ ${{ github.event.client_payload.actor }} == "wildlifehexagon" ]
          then
            echo ::set-output name=docker_path::"build/package/Dockerfile"
          elif [ ${{ github.event.client_payload.actor }} == "cybersiddhu" ]
          then
            echo ::set-output name=docker_path::"build/package/Dockerfile"
          else
            exit 1
          fi
      - name: image build and push
        if: ${{ success() }}
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD  }}
          repository: dictybase/${{ github.event.pull_request.head.repo.name }}
          add_git_labels: true
          tag_with_sha: true
          tag_with_ref: true
          tags: pr-${{ github.event.pull_request.number }}-${{ steps.vars.outputs.short_sha }}
          dockerfile: build/package/Dockerfile
      - name: prepare for deploy
        if: ${{ success() }}
        id: prepare_deploy
        uses: dictybase-docker/prepare-deploy@v1
        with:
          cluster-name: ${{ steps.vars.outputs.cluster }}
          cluster-zone: "us-central1-a"
          namespace: dictybase
          chart-name: ${{ github.event.pull_request.head.repo.name }}
          chart-path: deployments/charts/automan
          token: ${{ secrets.GITHUB_TOKEN }}
          image-tag: pr-${{ github.event.pull_request.number }}-${{ steps.vars.outputs.short_sha }}
          ref: ${{ steps.vars.outputs.branch }}
          artifact: ${{ github.event.pull_request.head.repo.name }}
          environment: development
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: download deployment artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.repository.name }}
      - name: download and setup path for github action binary
        run: |
          mkdir -p github-actions/bin
          curl -L -o github-actions/bin/actions https://github.com/dictybase-docker/github-actions/releases/download/v0.0.2/action_0.0.2_Linux_x86_64
          chmod +x github-actions/bin/actions
          echo "::add-path::$GITHUB_WORKSPACE/github-actions/bin"
      - name: extract information from deployment payload
        id: deploy_info
        run: actions --log-level debug sdp -f deployment.json
      - name: set in_progress deployment status
        if: ${{ success() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.repository_owner }} -r ${{ github.event.repository.name }} ds --state in_progress  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
      - name: setup google cloud sdk
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "299.0.0"
          project_id: ${{ secrets.PROJECT_ID }}
          service_account_key: ${{ secrets.SA_KEY }}
          export_default_credentials: true
      - name: set up helm
        uses: azure/setup-helm@v1
        with:
          version: "v2.16.9"
      - name: get gcloud credentials for k8s cluster
        run: gcloud container clusters get-credentials --project ${{ secrets.PROJECT_ID }} --zone ${{ steps.deploy_info.outputs.zone }} ${{ steps.deploy_info.outputs.cluster }}
      - name: deploy chart
        if: ${{ success() }}
        run: actions --log-level debug dc --name ${{ steps.deploy_info.outputs.chart }} --namespace ${{ steps.deploy_info.outputs.namespace }} --image-tag ${{ steps.deploy_info.outputs.image_tag }} --path ${{ steps.deploy_info.outputs.path }}
      - name: set successful deploy status
        if: ${{ success() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.repository_owner }} -r ${{ github.event.repository.name }} ds --state success  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
      - name: set unsuccessful deploy status
        if: ${{ failure() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.repository_owner }} -r ${{ github.event.repository.name }} ds --state error  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
