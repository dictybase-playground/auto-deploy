name: deploy-command
on:
  workflow_dispatch:
    inputs:
      repository-name:
        description: "The name of the repository from which the slash command was dispatched"
        required: true
      repository-owner:
        description: "The owner of the repository from which the slash command was dispatched"
        required: true
      issue-number:
        description: "The issue number in which the slash command was made"
        required: true
      html-url:
        description: "URL where comment was created"
        required: true
      comment-id:
        description: "ID of comment with deploy command"
        required: true
      cluster:
        description: "The cluster to deploy to"
        required: true
      commit:
        description: "Commit ID to deploy"
        required: false
      branch:
        description: "Branch to deploy"
        required: false
jobs:
  prepare-deploy:
    runs-on: ubuntu-latest
    name: Testing deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: download and setup path for github actions binary
        run: |
          mkdir -p github-actions/bin
          curl -L -o github-actions/bin/actions https://github.com/dictybase-docker/github-actions/releases/download/v0.4.1/action_0.4.1_Linux_x86_64
          chmod +x github-actions/bin/actions
          echo "::add-path::$GITHUB_WORKSPACE/github-actions/bin"
      - name: parse deploy command and set vars
        id: vars
        run: actions --log-level debug pcd -f ${GITHUB_EVENT_PATH}
      - name: print vars
        run: |
          echo ref: ${{ steps.vars.outputs.ref }}
          echo image_tag: ${{ steps.vars.outputs.image_tag }}
      - name: image build and push
        if: ${{ success() }}
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD  }}
          repository: dictybase/${{ github.event.inputs.repository-name }}
          add_git_labels: true
          tag_with_sha: true
          tag_with_ref: true
          tags: ${{ steps.vars.outputs.image_tag }}
          dockerfile: build/package/Dockerfile
      - name: prepare for deploy
        if: ${{ success() }}
        id: prepare_deploy
        uses: dictybase-docker/prepare-deploy@v1
        with:
          cluster-name: ${{ github.event.inputs.cluster }}
          cluster-zone: "us-central1-a"
          namespace: dictybase
          chart-name: ${{ github.event.inputs.repository-name }}
          chart-path: deployments/charts/automan
          token: ${{ secrets.GITHUB_TOKEN }}
          image-tag: ${{ steps.vars.outputs.image_tag }}
          ref: ${{ steps.vars.outputs.ref }}
          artifact: ${{ github.event.inputs.repository-name }}
          environment: development
  deploy:
    runs-on: ubuntu-latest
    needs: prepare-deploy
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: download deployment artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.inputs.repository-name }}
      - name: download and setup path for github action binary
        run: |
          mkdir -p github-actions/bin
          curl -L -o github-actions/bin/actions https://github.com/dictybase-docker/github-actions/releases/download/v0.4.1/action_0.4.1_Linux_x86_64
          chmod +x github-actions/bin/actions
          echo "::add-path::$GITHUB_WORKSPACE/github-actions/bin"
      - name: extract information from deployment payload
        id: deploy_info
        run: actions --log-level debug sdp -f deployment.json
      - name: set in_progress deployment status
        if: ${{ success() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.event.inputs.repository-owner }} -r ${{ github.event.inputs.repository-name }} ds --state in_progress  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
      - name: setup google cloud sdk
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "307.0.0"
          project_id: ${{ secrets.PROJECT_ID }}
          service_account_key: ${{ secrets.SA_KEY }}
          export_default_credentials: true
      - name: set up helm
        uses: azure/setup-helm@v1
        with:
          version: "v2.16.9"
      - name: get gcloud credentials for k8s cluster
        run: gcloud container clusters get-credentials --project ${{ secrets.PROJECT_ID }} --zone ${{ steps.deploy_info.outputs.zone }} ${{ steps.deploy_info.outputs.cluster }}
      - name: deploy chart
        if: ${{ success() }}
        run: actions --log-level debug dc --name ${{ steps.deploy_info.outputs.chart }} --namespace ${{ steps.deploy_info.outputs.namespace }} --image-tag ${{ steps.deploy_info.outputs.image_tag }} --path ${{ steps.deploy_info.outputs.path }}
      - name: set successful deploy status
        if: ${{ success() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.event.inputs.repository-owner }} -r ${{ github.event.inputs.repository-name }} ds --state success  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
      - name: set unsuccessful deploy status
        if: ${{ failure() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.event.inputs.repository-owner }} -r ${{ github.event.inputs.repository-name }} ds --state error  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
  add-reaction:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          comment-id: ${{ github.event.inputs.comment-id }}
          reaction-type: hooray
