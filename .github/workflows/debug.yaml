name: Pull checks
on: pull_request
jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: get short sha
        id: vars
        run: echo ::set-output name=short_sha::$(git rev-parse --short HEAD)
      - name: image build and push
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD  }}
          repository: dictybase/${{ github.event.pull_request.head.repo.name }}
          add_git_labels: true
          tag_with_sha: true
          tag_with_ref: true
          tags: ${{ steps.vars.outputs.short_sha }}
          dockerfile: build/package/Dockerfile
      - name: prepare for deploy
        if: ${{ success() }}
        id: prepare_deploy
        uses: dictybase-docker/prepare-deploy@v1
        with:
          cluster-name: siddkube
          cluster-zone: "us-central1-a"
          namespace: dictybase
          chart-name: ${{ github.event.pull_request.head.repo.name }}
          chart-path: deployments/charts/automan
          token: ${{ secrets.GITHUB_TOKEN }}
          image-tag: ${{ steps.vars.outputs.short_sha }}
          ref: ${{ github.head_ref }}
          artifact: ${{ github.event.pull_request.head.repo.name }}
  deploy:
    needs: build
    runs-on: ubuntu-18.04
    steps:
      - name: check out code
        uses: actions/checkout@v2
      - name: download deployment artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ github.event.pull_request.head.repo.name }}
      - name: check out github actions code
        uses: actions/checkout@v2
        with:
          repository: dictybase-docker/github-actions 
          path: github-actions
          ref: develop
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: setup golang
        uses: actions/setup-go@v2
        with:
          go-version: 1.13.12
      - name: build binary
        run: |
          cd github-actions
          mkdir bin
          go build -o bin/actions cmd/github-actions/main.go
          echo "::add-path::$GITHUB_WORKSPACE/github-actions/bin"
          chmod +x bin/actions
      - name: extract information from deployment payload
        id: deploy_info
        run: actions --log-level debug sdp -f deployment.json
      - name: set in_progress deployment status
        if: ${{ success() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.repository_owner }} -r ${{ github.event.pull_request.head.repo.name }} ds --state in_progress  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
      - name: setup google cloud sdk
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: '298.0.0'
          project_id: ${{ secrets.PROJECT_ID }}
          service_account_key: ${{ secrets.SA_KEY }}
          export_default_credentials: true
      - name: set up helm 
        uses: azure/setup-helm@v1
        with:
          version: 'v2.16.7'
      - name: get gcloud credentials for k8s cluster
        run: gcloud container clusters get-credentials --project ${{ secrets.PROJECT_ID }} --zone ${{ steps.deploy_info.outputs.zone }} ${{ steps.deploy_info.outputs.cluster }}
      - name: deploy chart
        if: ${{ success() }}
        run: actions --log-level debug dc --name ${{ steps.deploy_info.outputs.chart }} --namespace ${{ steps.deploy_info.outputs.namespace }} --image-tag ${{ steps.deploy_info.outputs.image_tag }} --path ${{ steps.deploy_info.outputs.path }}
      - name: set successful deploy status
        if: ${{ success() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.repository_owner }} -r ${{ github.event.pull_request.head.repo.name }} ds --state success  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
      - name: set unsuccessful deploy status
        if: ${{ failure() }}
        run: actions --log-level debug -t ${{ secrets.GITHUB_TOKEN }} --owner ${{ github.repository_owner }} -r ${{ github.event.pull_request.head.repo.name }} ds --state error  --deployment_id ${{ steps.deploy_info.outputs.id }} --url ${{ steps.deploy_info.outputs.url }}
